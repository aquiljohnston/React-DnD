{"version":3,"sources":["DragAndDrop.js","App.js","serviceWorker.js","index.js"],"names":["DragAndDrop","props","data","dispatch","className","inDropZone","onDrop","e","preventDefault","stopPropagation","files","dataTransfer","length","existingFiles","fileList","map","f","name","filter","includes","type","dropDepth","handleDrop","onDragOver","dropEffect","handleDragOver","onDragEnter","handleDragEnter","onDragLeave","handleDragLeave","App","React","useReducer","state","action","concat","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yQA0DeA,EAxDK,SAAAC,GAAU,IAEpBC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,SA0Cd,OACE,yBAAKC,UAAWF,EAAKG,WAAa,kCAAoC,iBACpEC,OAAQ,SAAAC,GAAC,OAlBM,SAAAA,GACjBA,EAAEC,iBACFD,EAAEE,kBAEF,IAAIC,EAAK,YAAOH,EAAEI,aAAaD,OAE/B,GAAIA,GAASA,EAAME,OAAS,EAAG,CAC7B,IAAMC,EAAgBX,EAAKY,SAASC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,QAC/CP,EAAQA,EAAMQ,QAAO,SAAAF,GAAC,OAAKH,EAAcM,SAASH,EAAEC,SAEpDd,EAAS,CAAEiB,KAAM,mBAAoBV,UACrCP,EAAS,CAAEiB,KAAM,iBAAkBC,UAAW,IAC9ClB,EAAS,CAAEiB,KAAM,mBAAoBf,YAAY,KAMpCiB,CAAWf,IACxBgB,WAAY,SAAAhB,GAAC,OA3BM,SAAAA,GACrBA,EAAEC,iBACFD,EAAEE,kBAEFF,EAAEI,aAAaa,WAAa,OAC5BrB,EAAS,CAAEiB,KAAM,mBAAoBf,YAAY,IAsB9BoB,CAAelB,IAChCmB,YAAa,SAAAnB,GAAC,OA5CM,SAAAA,GACtBA,EAAEC,iBACFD,EAAEE,kBAEFN,EAAS,CAAEiB,KAAM,iBAAkBC,UAAWnB,EAAKmB,UAAY,IAwC3CM,CAAgBpB,IAClCqB,YAAa,SAAArB,GAAC,OAtCM,SAAAA,GACtBA,EAAEC,iBACFD,EAAEE,kBAEFN,EAAS,CAAEiB,KAAM,iBAAkBC,UAAWnB,EAAKmB,UAAY,IAC3DnB,EAAKmB,UAAY,GACrBlB,EAAS,CAAEiB,KAAM,mBAAoBf,YAAY,IAgC7BwB,CAAgBtB,KAElC,0DCdSuB,MAnCf,WAEE,IAFa,EAeYC,IAAMC,YAbf,SAACC,EAAOC,GACtB,OAAQA,EAAOd,MACb,IAAK,iBACH,OAAO,eAAKa,EAAZ,CAAmBZ,UAAWa,EAAOb,YACvC,IAAK,mBACH,OAAO,eAAKY,EAAZ,CAAmB5B,WAAY6B,EAAO7B,aACxC,IAAK,mBACH,OAAO,eAAK4B,EAAZ,CAAmBnB,SAAUmB,EAAMnB,SAASqB,OAAOD,EAAOxB,SAC5D,QACE,OAAOuB,KAKF,CAAEZ,UAAW,EAAGhB,YAAY,EAAOS,SAAU,KAhB3C,mBAeNZ,EAfM,KAeAC,EAfA,KAmBb,OACE,yBAAKC,UAAU,OACb,6DACA,kBAAC,EAAD,CAAaF,KAAMA,EAAMC,SAAUA,IAEnC,wBAAIC,UAAU,iBACXF,EAAKY,SAASC,KAAI,SAAAC,GACjB,OACE,wBAAIoB,IAAKpB,EAAEC,MAAOD,EAAEC,YCnBZoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2baf6618.chunk.js","sourcesContent":["import React from 'react';\n\nconst DragAndDrop = props => {\n\n  const { data, dispatch } = props;\n\n  const handleDragEnter = e => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    dispatch({ type: 'SET_DROP_DEPTH', dropDepth: data.dropDepth + 1 });\n  };\n\n  const handleDragLeave = e => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    dispatch({ type: 'SET_DROP_DEPTH', dropDepth: data.dropDepth - 1 });\n    if (data.dropDepth > 0) return\n    dispatch({ type: 'SET_IN_DROP_ZONE', inDropZone: false })\n  };\n\n  const handleDragOver = e => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    e.dataTransfer.dropEffect = 'copy';\n    dispatch({ type: 'SET_IN_DROP_ZONE', inDropZone: true });\n  };\n\n  const handleDrop = e => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    let files = [...e.dataTransfer.files];\n\n    if (files && files.length > 0) {\n      const existingFiles = data.fileList.map(f => f.name)\n      files = files.filter(f => !existingFiles.includes(f.name))\n\n      dispatch({ type: 'ADD_FILE_TO_LIST', files });\n      dispatch({ type: 'SET_DROP_DEPTH', dropDepth: 0 });\n      dispatch({ type: 'SET_IN_DROP_ZONE', inDropZone: false });\n    }\n  };\n\n  return (\n    <div className={data.inDropZone ? 'drag-drop-zone inside-drag-area' : 'drag-drop-zone'}\n      onDrop={e => handleDrop(e)}\n      onDragOver={e => handleDragOver(e)}\n      onDragEnter={e => handleDragEnter(e)}\n      onDragLeave={e => handleDragLeave(e)}\n    >\n      <p>Drag files here to upload</p>\n    </div>\n  );\n};\n\nexport default DragAndDrop;\n","import React from 'react';\nimport './App.css';\nimport DragAndDrop from './DragAndDrop'\n\nfunction App() {\n\n  const reducer = (state, action) => {\n    switch (action.type) {\n      case 'SET_DROP_DEPTH':\n        return { ...state, dropDepth: action.dropDepth }\n      case 'SET_IN_DROP_ZONE':\n        return { ...state, inDropZone: action.inDropZone };\n      case 'ADD_FILE_TO_LIST':\n        return { ...state, fileList: state.fileList.concat(action.files) };\n      default:\n        return state;\n    }\n  };\n\n  const [data, dispatch] = React.useReducer(\n    reducer, { dropDepth: 0, inDropZone: false, fileList: [] }\n  )\n\n  return (\n    <div className=\"App\">\n      <h1>React drag and drop component</h1>\n      <DragAndDrop data={data} dispatch={dispatch} />\n\n      <ol className=\"dropped-files\">\n        {data.fileList.map(f => {\n          return (\n            <li key={f.name}>{f.name}</li>\n          )\n        })}\n      </ol>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}